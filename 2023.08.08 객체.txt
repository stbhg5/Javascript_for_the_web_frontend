[2023.08.08 객체]


1. 객체 생성
객체는 비원시 타입 자료형으로, 한 번에 여러 개의 데이터 값들을 저장할 수 있는 자료형이다.
객체를 생성하는 방법에는 2가지 방법이 있는데, 객체 생성자를 사용해 만드는 방법과 중괄호를 이용한 객체 리터럴 방식이다.

1) 객체 생성자
new 라는 키워드를 통해 객체를 생성할 수 있다.

// 객체 생성자
let person = new Object();

2) 객체 리터럴
중괄호를 이용해 객체를 생성하며, 가장 많이 사용되는 방식이다.

// 객체 리터럴
let person = {};


2. 객체 프로퍼티
객체의 프로퍼티는 객체의 중괄호 내부에 들어갈 데이터로, key와 value쌍으로 이루어져있는 데이터이다.
객체의 프로퍼티는 :(콜론)을 기준으로 왼쪽에는 key값을, 오른쪽에는 value를 작성한다.

// 객체 프로퍼티
let person = {
  name: "홍길동",
  age: 20
};

name: "홍길동", age: 20을 객체의 프로퍼티 혹은 속성이라고 부른다.
객체에는 프로퍼티를 몇 개를 넣어도, value값으로 어떠한 자료형을 넣어도 상관 없지만, 객체의 값을 찾을 때에는 key 값을 통해 찾기 때문에, 프로퍼티의 key 값은 고유해야 한다.

// 다양한 값을 가진 객체 프로퍼티
let person = {
  name: "홍길동",
  phone: undefined,
  age: 25,
  etc: function () {
    console.log("hello world");
  }
};

객체 프로퍼티의 value는 문자열, undefined, 숫자형, 함수 등 어떠한 자료형을 넣어도 상관없다. 하지만 객체 프로퍼티의 key 값은 항상 고유해야 한다는 것을 주의해야 한다.


3. 객체 프로퍼티 값 사용
객체의 값을 꺼내 사용하는 방식에는 점 표기법과 괄호 표기법 이렇게 두 가지의 방식이 있다.

// 객체 프로퍼티 값 사용
let person = {
  name: "홍길동",
  age: 20,
  pet: "cat"
};

1) 점 표기법
점(.) 을 이용해 객체의 값을 꺼내는 방법. 객체의 이름 뒤에 점을 찍고 객체 프로퍼티의 key값을 작성하면, key값에 해당하는 value 값을 가져오게 된다.

// 점 표기법
console.log(person.name); //홍길동
console.log(person.age); //20
console.log(person.pet); //cat

2) 괄호 표기법
객체의 이름 뒤에 대괄호를 열어 대괄호 안에 key 값을 작성해주는 방식.

// 괄호 표기법
console.log(person["name"]); //홍길동
console.log(person["age"]); //20
console.log(person["pet"]); //cat

주의할 점은 대괄호 안에 큰따옴표를 이용해 문자열임을 명시해주어야 한다.

보통 객체 프로퍼티의 값을 꺼낼 때에는 점표기법을 많이 사용하지만, 객체의 key 값이 고정적이지 않고 key 값을 특정 함수의 매개변수가 결정한다거나, 값이 계속 바뀌는 동적인 경우에는 괄호 표기법을 활용하게 된다.

객체의 key 값을 매개변수가 결정하는 코드를 작성 한다.

// 객체의 key 값을 매개변수가 결정하는 코드
const getValue = (key) => {
  console.log(person[key]);
};
getValue("name");

person 객체 아래에 getValue라는 함수를 함수 표현식인 화살표형 함수로 선언한 뒤, getValue 함수의 인수로 person 객체 프로퍼티의 key값인 "name" 을 넘겨주게 되면, 출력 결과 name에 해당하는 value 값인 "홍길동" 이 출력된다.
괄호 표기법은 이렇게 객체의 key 값을 특정 함수의 매개변수가 결정하는 상황, 혹은 key 값이 계속 변화하는 상황에서 쓰이는 표기법이다.


4. 프로퍼티 추가
객체의 프로퍼티를 추가할 때에도 객체 프로퍼티의 값을 사용하는 방법과 마찬가지로 점 표기법, 괄호 표기법 2가지가 있다.

// 프로퍼티 추가
let person = {
  name: "홍길동",
  age: 20,
  pet: "cat"
};
person.phone = "010-1234-5678";
person["height"] = 180;
console.log(person);


5. 프로퍼티 수정
객체 프로퍼티의 값 수정 또한 프로퍼티를 추가할 때와 동일하게, 점 표기법과 괄호 표기법을 이용하여 수정할 수 있다.

// 프로퍼티 수정
let person = {
  name: "홍길동",
  age: 20,
  pet: "cat"
};
person.age = 25;
person["pet"] = "dog";
console.log(person);

작성된 코드에서는 person 객체를 let을 이용해 생성했다. 객체의 프로퍼티 값을 수정할 때에는 상수로 선언된 객체의 프로퍼티 값도 변경 가능하다.

// 상수로 선언된 객체 프로퍼티 값 수정
const person = {
  name: "홍길동",
  age: 20,
  pet: "cat"
};
person.age = 25;
person["pet"] = "dog";
console.log(person);

분명히 상수의 값은 변경될 수 없다고 배웠었는데, 왜 const로 선언된 객체 프로퍼티의 값 변경은 가능한 것일까? 이것은 객체 프로퍼티 값을 수정하는 것이, person 객체 자체를 수정하는 행위가 아니기 때문이다.
객체는 생성될 때에 고유한 id 를 갖게 되는데, person 객체의 프로퍼티를 변경하는 것은 이 객체의 고유 id를 변경하는 것이 아니기 때문에, const로 선언하더라도 프로퍼티의 값 변경이 가능한 것이다.

객체의 고유한 id까지 변경하는 경우는 어떤 경우가 있는지 코드로 작성 한다.

// 객체의 고유한 id까지 변경
const person = {
  name: "홍길동",
  age: 20,
  pet: "cat",
};
person = {
  pet: "dog";
}

이렇게 person 이라는 객체 자체에 새로운 프로퍼티를 저장하려 한다면, 이것은 객체의 고유한 id를 변경하는 것이 되므로, 에러가 발생하게 된다.
때문에 객체 프로퍼티의 값을 변경하는 경우에는, 객체를 const로 선언하더라도 에러 없이 값이 변경될 수 있게 된다.


6. 프로퍼티 삭제
프로퍼티를 삭제할 때에는 delete 키워드를 사용 한다. 삭제하려는 프로퍼티의 값을 점표기법과 괄호표기법으로 작성한 다음, 맨 앞에 delete 키워드를 작성해주면 된다.

// 프로퍼티 삭제
const person = {
  name: "홍길동",
  age: 20,
  pet: "cat",
};
delete person.pet;
delete person["age"];
console.log(person);


7. 객체의 함수 프로퍼티
객체 안에 함수를 호출하기 위해서는 일반 함수를 호출하는 방식과 동일하게, 점 표기법과 괄호 표기법으로 호출 가능하며, 객체 이름 뒤에 함수값이 할당되어있는 key 값을 적고 호출해주면 된다.
person 객체 안에 key 값이 print 이고, value 값이 "hello world" 를 출력하는 함수인 프로퍼티를 추가로 작성 한다.

// 객체의 함수 프로퍼티
const person = {
  name: "홍길동",
  age: 20,
  pet: "cat",
  print: function () {
      console.log("hello world");
  },
};

// print의 value값으로 저장된 함수를 호출
person.print(); // 점 표기법
person["print"](); // 괄호 표기법

객체 프로퍼티 값이 함수일 경우, 이를 메서드 라고 부른다.
메서드는 객체 내부의 프로퍼티에 접근할 수 있는 특별한 기능이 있는데, 바로 this를 이용해 자신이 속해있는 객체를 가리킬 수 있다.

// this를 이용해 자신이 속해있는 객체를 가리키기
const person = {
  name: "홍길동",
  age: 25,
  print: function () {
      console.log(`제 이름은 ${this.name} 입니다.`);
  },
};
person.print(); // 제 이름은 홍길동 입니다.

메서드를 생성할 때 주의할 점은 화살표형 함수가 아닌 function을 통해 메서드를 선언해야 된다.

// 메서드 생성 시 화살표형 함수로 생성
const person = {
  name: "홍길동",
  age: 25,
  print: () => {
      console.log(`제 이름은 ${this.name} 입니다.`);
  },
};
person.print(); // ERROR

코드 실행 결과 에러가 발생하는 이유는 function으로 선언한 메서드는 this 가 제대로 자신이 속한 객체를 가르키지만, 화살표형 함수는 자신이 속한 객체를 가리키지 못하기 때문이다.


참고강의 : https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%B2%AB%EA%B1%B8%EC%9D%8C